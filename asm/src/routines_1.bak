; ------------------------------------------------------------------------------------------------------
; MSXBAS2ROM Z80 routines
; by: Amaury Carvalho, 2020
; Compile with:
;   pasmo routines.asm routines.bin
;   xxd -i routines.bin routines.h
; ------------------------------------------------------------------------------------------------------

  org 0x8010

; ------------------------------------------------------------------------------------------------------
; BIOS AND BASIC FUNCTIONS
; ------------------------------------------------------------------------------------------------------

CALBAS:       equ 0x0159
EXTROM:	      equ 0x015F
CRUNCH:       equ 0x42B2
NEWSTT:       equ 0x4601   ; execute a text (hl=text pointer; text must start with a ":")
CHRGTR:       equ 0x4666   ; extract one character from command line text (hl=text pointer; hl=char address, a=char, Z=end of line)
FRMEVL:       equ 0x4C64   ; evaluate an expression in text (hl=expression pointer; hl=after expression, VALTYP/DAC)
FRMQNT:       equ 0x542F   ; evaluate an expression and return as integer (hl=expression; hl=after, DE=result)
GETBYT:       equ 0x521C   ; evaluate an expression and return as byte (hl=expression; hl=after, A=result)
FRESTR:       equ 0x67D0   ; register a string (VALTYP=3, DAC=string descriptor; HL=string descriptor)
PTRGET:       equ 0x5EA4   ; obtain the address for the storage of a variable (HL=variable name address, SUBFLG; HL=after name, DE=content address)
BEEP:         equ 0x00C0
CHGET:        equ 0x009F
CHPUT:        equ 0x00A2

ERRORHANDLER: equ 0x406F

HCMD:         equ 0xFE0D   ; cmd hook
HPRGE:        equ 0xFEF8   ; end of program hook

WRTVDP:       equ 0x0047
RDVRM:        equ 0x004A
WRTVRM:       equ 0x004D
LDIRVM:       equ 0x005C
LDIRMV:       equ 0x0059
FILVRM:       equ 0x0056 ; fill VRAM with value
CALPAT:       equ 0x0084
CALATR:       equ 0x0087
GSPSIZ:       equ 0x008A
GRPPRT:       equ 0x008D
CLRSPR:       equ 0x0069

BIGFIL:       equ 0x016B ; msx 2
NRDVRM:       equ 0x0174 ; msx 2
NWRVRM:       equ 0x0177 ; msx 2
NRDVDP:       equ 0x013E ; msx 2
VDPSTA:       equ 0x0131 ; msx 2
NWRVDP:       equ 0x012D ; msx 2 (0x0647)
CALPAT2:      equ 0x00F9 ; msx 2
CALATR2:      equ 0x00FD ; msx 2
GSPSIZ2:      equ 0x0101 ; msx 2
CLRSPR2:      equ 0x00F5 ; msx 2

; ------------------------------------------------------------------------------------------------------
; BIOS AND BASIC WORK AREA
; ------------------------------------------------------------------------------------------------------

USRTAB:       equ 0xF39A   ; 20
VALTYPE:      equ 0xF663   ; 1
VALDATA:      equ 0xF7F8   ; 2
DAC:          equ 0xF7F6   ; 16
SUBFLG:       equ 0xF6A5   ; 1 (0=simple variable, not 0 = array)
STMTKTAB:     equ 0x392E   ; addresses of BASIC statement token service routines (start from 081H to 0D8H)
FNCTKTAB:     equ 0x39DE   ; addresses of BASIC function token service routines

TEMP:         equ 0xF6A7   ; 2
TEMP2:        equ 0xF6BC   ; 2
TEMP3:        equ 0xF69D   ; 2
TEMP8:        equ 0xF69F   ; 2
TEMP9:        equ 0xF7B8   ; 2
RAWPRT:       equ 0xF41F   ; 1
PARM1:        equ 0xF6E8   ; 100
PARM2:        equ 0xF750   ; 100
BUF:          equ 0xF55E   ; 259
KBUF:         equ 0xF41F   ; 318
SWPTMP:       equ 0xF7BC   ; 8
STRBUF:       equ 0xF7C5   ; 43

SCRMOD:       equ 0xFCAF   ; 0=40x24 Text Mode, 1=32x24 Text Mode, 2=Graphics Mode, 3=Multicolour Mode.
RG0SAV:       equ 0xF3DF
RG1SAV:       equ 0xF3E0
RG8SAV:       equ 0xFFE7
STATFL:       equ 0xF3E7  ; VDP status register

GRPNAM:       equ 0xF3C7  ; pattern name table
GRPCOL:       equ 0xF3C9  ; colour table
GRPCGP:       equ 0xF3CB  ; pattern generator table
GRPATR:       equ 0xF3CD  ; sprite attribute table
GRPPAT:       equ 0xF3CF  ; sprite generator table
CGPNT:        equ 0xF920  ; 2 - current MSX Font location (0x1BBF)
ATRBAS:       equ 0xF928  ; sprite attribute table

MLTNAM:       equ 0xF3D1  ; pattern name table (screen 3, multicolor)
MLTCOL:       equ 0xF3D3  ; colour table (screen 3, multicolor)
MLTCGP:       equ 0xF3D5  ; pattern generator table (screen 3, multicolor)
MLTATR:       equ 0xF3D7  ; sprite attribute table (screen 3, multicolor)
MLTPAT:       equ 0xF3D9  ; sprite generator table (screen 3, multicolor)

; ------------------------------------------------------------------------------------------------------
; MACROS
; ------------------------------------------------------------------------------------------------------

MACRO call_basic,CALL_PARM
    ld ix, CALL_PARM
    call CALBAS
ENDM

MACRO call_debug
  call CHPUT
  call BEEP
  call CHGET
ENDM

; ------------------------------------------------------------------------------------------------------
; INITIALIZE
; ------------------------------------------------------------------------------------------------------

initialize:
  call initialize_cmd
  jp initialize_usr

; ------------------------------------------------------------------------------------------------------
; CMD IMPLEMENTATION
; https://github.com/Konamiman/MSX2-Technical-Handbook/blob/master/md/Chapter2.md#44-expansion-of-cmd-command
; ------------------------------------------------------------------------------------------------------

initialize_cmd:
  ld hl, cmd_hook
  ld de, HCMD
  ld bc, 5
  ldir
  ret

; cmd hook
cmd_hook:
  jp cmd_parse
  nop
  nop

; xbasic parse
cmd_xbasic_parse:
  pop hl              ; caller return address = stream of cmd data
  ld bc, cmd_xbasic_parse.1
  push bc
  ld bc, cmd_parse.error
  push bc
  jp cmd_parse
cmd_xbasic_parse.1:
  push hl             ; return to xbasic code
  ret

; parse cmd instruction
;   default error handler loaded into call stack
;   drop it with POP AF to register success
cmd_parse:
  ld a, (hl)           ; first token
  or 0
  ret z                ; empty statement = error

  ; if standard token detected (0x81 to 0xD8)-> transfer to basic
  cp 0x81
  jp nc, cmd_runstd

cmd_parse.continue:

cmd_parse.error:
  ret   ; error handler in stack if not parsed with success

cmd_parse.eol:
  call_basic CHRGTR    ; next char
  jr nz, cmd_parse.eol

cmd_parse.ok:
  pop af         ; discards default CMD error handler
  ret

; exec a standard basic code (tokenized)
cmd_runstd:
  cp 0xD9
  jp nc, cmd_parse.continue

  jp cmd_parse.eol

  push hl
    ld c, 0x81
    sub c
    sla a        ; token = (token - 0x81) * 2
    ld c, a
    ld b, 0
    ld hl, STMTKTAB
    add hl, bc
    ld e, (hl)
    inc hl
    ld d, (hl)   ; de = token address
  pop hl
  push de
  pop ix         ; basic instruction address

  push hl
    inc hl
    call CALBAS
  pop hl

  jp cmd_parse.eol

; exec as assembly code
; CMD RUNASM <include number>
cmd_runasm:
  call getparm.int
  jp nz, error
  call data.address
  push hl
  ret       ; indirect call

; exec as plain text basic code
; CMD RUNBAS <include number>
cmd_runbas:
  call getparm.int
  jp nz, error
  call data.address
  ld a, ':'
  ld (BUF), a
  ld bc, 0
  xor a
  push hl
    cpir         ; string size
  pop hl
  ld de, BUF+1
  ldir
  xor a
  ld (hl), a
  ld hl, BUF
  call savehook
  call execbas   ; hl has the line code in plain text, null terminated
  jp resthook

; write include to vram address
; CMD WRTVRAM <include number>, <vram address>
cmd_wrtvram:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number

  call getparm.int
  jp nz, error
  ld (TEMP2), bc      ; vram address

cmd_wrtvram.exec:
  call page1.memory.enable

  ld bc, (TEMP)
  call data.address   ; hl = data address

  ld de, (TEMP2)
  call data.unpack

  call gfxLDIRVM      ; hl = ram data address, de = vram data address, bc = length

  jp page1.rom.enable

; write include to vram tile pattern table
; CMD WRTCHR <include number>
cmd_wrtchr:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number
  ld bc, (GRPCGP)
  ld (TEMP2), bc
  jp cmd_wrtvram.exec

; write include to vram tile color table
; CMD WRTCLR <include number>
cmd_wrtclr:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number
  ld bc, (GRPCOL)
  ld (TEMP2), bc
  jp cmd_wrtvram.exec

; write include to vram screen table
; CMD WRTSCR <include number>
cmd_wrtscr:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number
  ld bc, (GRPNAM)
  ld (TEMP2), bc
  jp cmd_wrtvram.exec

; write include to vram sprite pattern table
; CMD WRTSPRPAT <include number>
cmd_wrtsprpat:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number
  xor a
  call gfxCALPAT
  ld (TEMP2), hl
  jp cmd_wrtvram.exec

; write include to vram sprite color table
; CMD WRTSPRCLR <include number>
cmd_wrtsprclr:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number
  xor a
  call gfxCALCOL
  ld (TEMP2), hl
  jp cmd_wrtvram.exec

; write include to vram sprite attribute table
; CMD WRTSPRATR <include number>
cmd_wrtspratr:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; include number
  xor a
  call gfxCALATR
  ld (TEMP2), hl
  jp cmd_wrtvram.exec

; write ram to vram address
; CMD RAMTOVRAM <integer array address>, <vram address>
cmd_ramtovram:
  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; integer array address

  call getparm.int
  jp nz, error
  ld (TEMP2), bc      ; vram address

  ld hl, (TEMP)
  ld e, (hl)
  inc hl
  ld d, (hl)
  inc hl

  ex de, hl
  add hl, hl
  ld c, l
  ld b, h             ; bc = array size in bytes
  ex de, hl           ; hl = ram source
  ld de, (TEMP2)      ; de = vram dest
  jp gfxLDIRVM      ; hl = ram data address, de = vram data address, bc = length

; write vram to ram address
; CMD VRAMTORAM <vram address>, <integer array address>
cmd_vramtoram:
  call getparm.int
  jp nz, error
  ld (TEMP2), bc      ; vram address

  call getparm.int
  jp nz, error
  ld (TEMP), bc       ; integer array address

  ld hl, (TEMP)
  ld e, (hl)
  inc hl
  ld d, (hl)
  inc hl

  ex de, hl           ; de = ram source
  add hl, hl
  ld c, l
  ld b, h             ; bc = array size

  ld hl, (TEMP2)      ; hl = vram dest
  jp gfxLDIRMV      ; de = ram data address, hl = vram data address, bc = length

; out: bc = integer parameter
getparm.int:
  ret

; in:  bc = include number
; out: hl = include address
data.address:
  ret

; in:  hl = pletter data
; out: hl = unpacked data
;      bc = size
data.unpack:
  ld de, 0x4000
  call pletter.unpack
  exx 						; calculate decoded length (de' point to end of decoded data)
  ex de, hl
  ld de, 0x4000
  xor a
  sbc hl, de
  ld b, h
  ld c, l 					; bc = decoded length
  ld hl, 0x4000          	; hl = decoded data
  ret

page1.memory.enable:
  ret

page1.rom.enable:
  ret

; ------------------------------------------------------------------------------------------------------
; USR() IMPLEMENTATION
; https://github.com/Konamiman/MSX2-Technical-Handbook/blob/master/md/Chapter2.md#41-usr-function
; ------------------------------------------------------------------------------------------------------

initialize_usr:
  ld hl, newusrtab
  ld de, USRTAB
  ld bc, 20
  ldir
  ret

newusrtab: dw usr0, usr1, usr2, usr_def, usr_def, usr_def, usr_def, usr_def, usr_def, usr_def

; get include data address
usr0:
  call getinclude
  jp nz, error
  ld (VALDATA), hl
  ret

; exec as assembly code
usr1:
  call getinclude
  jp nz, error
  push hl
  ret       ; indirect call

; exec as basic code
usr2:
  call getinclude
  jp nz, error
  call savehook
  call execbas   ; hl has the line code in plain text, null terminated
  jp resthook

; default
usr_def:
  ret

; in  a  = vartype
;     hl = point to var data
; out hl = point to include initial data
getinclude:
  cp 2       ; integer type
  ret nz
  ld bc, (VALDATA) ; input integer
  ld hl, data      ; data linked list start
  ld a, b
  or c
  jr z, getinclude.ok

getinclude.next:
  ld e, (hl)
  inc hl
  ld d, (hl)
  ex de, hl

  ld a, d
  or e
  jr z, getinclude.error

  dec bc
  jr nz, getinclude.next

getinclude.ok:
  inc hl
  inc hl
  xor a
  ret

getinclude.error:
  inc a
  ret

error:
  ld e, 5    ; illegal function call
  call_basic ERRORHANDLER
  ret

savehook:
  push hl
    ld hl,HPRGE
    ld de,PARM2+90
    ld bc,5
    ldir
  pop hl
  ret

resthook:
  push hl
    ld hl,PARM2+90
    ld de,HPRGE
    ld bc,5
    ldir
  pop hl
  ret

; hl = basic code in plain text
; https://www.msx.org/forum/msx-talk/development/invoking-the-basic-interpreter-from-a-ml-program
execbas:
  pop hl
  ld a, 0xC3      ; jp (hl) = ret
  ld (HPRGE), a
  ld (HPRGE+1), hl
  call_basic CRUNCH
  ld hl,RAWPRT
  call_basic NEWSTT
  ret

;---------------------------------------------------------------------------------------------------------
; VDP / VRAM support routines
;---------------------------------------------------------------------------------------------------------

; WRITE TO VDP
; in b = data
;    c = register number
;    a = register number
gfxWRTVDP:
  bit 7, a
  ret nz                ; is negative? read only
  cp 8
  ret z                 ; is register 8? then status register 0 (read only)
  jr nc, gfxWRTVDP.1    ; is > 8? then control registers numbers added 1
  jr gfxWRTVDP.3
gfxWRTVDP.1:
  ld ix, SCRMOD
  bit 3, (ix)
  jr nz, gfxWRTVDP.2
  bit 2, (ix)
  jr nz, gfxWRTVDP.2
  ret
gfxWRTVDP.2:
  dec a
  ld c, a
gfxWRTVDP.3:
  jp WRTVDP        ; msx 1

; READ FROM VDP
; in  a = register number
; out a = data
gfxRDVDP:
  bit 7, a
  jr nz, gfxRDVDP.1     ; is negative? then status register 1 to 9
  cp 8
  jr z,  gfxRDVDP.2     ; is register 8? then status register 0
  cp 9
  jr nc, gfxRDVDP.3     ; is >= 9? then control registers numbers added 1
    ld hl, RG0SAV       ; else is correct control registers numbers
    jr gfxRDVDP.4
gfxRDVDP.1:
  ld ix, SCRMOD
  bit 3, (ix)
  jr nz, gfxRDVDP.1.a
  bit 2, (ix)
  jr nz, gfxRDVDP.1.a
  xor a
  ret
gfxRDVDP.1.a:
  neg
  jp NRDVDP   ;BIOS_VDPSTA
gfxRDVDP.2:
  ld a, (STATFL)
  ret
  ;xor a
  ;jp BIOS_VDPSTA
gfxRDVDP.3:
  ld hl, RG8SAV-9
gfxRDVDP.4:
  ld d, 0
  ld e, a
  add hl,de
  ld a, (hl)
  ret

; in: A=Data byte, BC=Length, HL=VRAM address
gfxFILVRM:
  ld ix, SCRMOD
  bit 3, (ix)
  jp nz, BIGFIL
  bit 2, (ix)
  jp nz, BIGFIL
  jp FILVRM

; in: A=Sprite pattern number
; out: HL=Sprite pattern address
gfxCALPAT:
  ld iy, SCRMOD
  ld ix, CALPAT2
  bit 3, (iy)
  jp nz, EXTROM
  bit 2, (iy)
  jp nz, EXTROM
  jp CALPAT

; in: A=Sprite number
; out: HL=Sprite attribute address
gfxCALATR:
  ld iy, SCRMOD
  ld ix, CALATR2
  bit 3, (iy)
  jp nz, EXTROM
  bit 2, (iy)
  jp nz, EXTROM
  jp CALATR

; in:  A = sprite number
; out: HL = address to color table
gfxCALCOL:
  push af
  push de
    ld h, 0
    ld l, a         ; recover sprite number
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl      ; multiply by 16 (shift left 4)
    push hl
      xor a
      call gfxCALATR    ; get sprite attribute table address
    pop de
    add hl, de
    xor a
    ld de, 512
    sbc hl, de      ; address of color table from sprite multicolor
  pop de
  pop af
  ret

; out: A=Bytes in sprite pattern (8 or 32)
gfxGSPSIZ:
  ld iy, SCRMOD
  ld ix, GSPSIZ2
  bit 3, (iy)
  jp nz, EXTROM
  bit 2, (iy)
  jp nz, EXTROM
  jp GSPSIZ

gfxCLRSPR:
  ld iy, SCRMOD
  ld ix, CLRSPR2
  bit 3, (iy)
  jp nz, EXTROM
  bit 2, (iy)
  jp nz, EXTROM
  jp CLRSPR

; RAM to VRAM
; in: BC=Length, dest DE=VRAM address, source HL=RAM address
gfxLDIRVM:
  jp LDIRVM

; VRAM to RAM
; in: BC=Length, dest DE=RAM address, source HL=VRAM address
gfxLDIRMV:
  jp LDIRMV

; WRITE TO VRAM
; in hl = address
;     a = data
gfxWRTVRM:
  ld ix, SCRMOD
  bit 3, (ix)
  jp nz, NWRVRM
  bit 2, (ix)
  jp nz, NWRVRM
  jp WRTVRM

; READ FROM VRAM
; in hl = address
; out a = data
gfxRDVRM:
  ld ix, SCRMOD
  bit 3, (ix)
  jp nz, NRDVRM
  bit 2, (ix)
  jp nz, NRDVRM
  jp RDVRM

;---------------------------------------------------------------------------------------------------------
; Pletter v0.5c1 adapted from XL2S Entertainment 2008
; https://github.com/nanochess/Pletter
; call unpack with hl pointing to some pletter5 data, and de pointing to the destination.
; changes all registers (de' point to decoded data end address)
; define lengthindata when the original size is written in the pletter data
; define LENGTHINDATA
;---------------------------------------------------------------------------------------------------------

  macro PLETTER.GETBIT
    add a,a
    call z,pletter.getbit
  endm

  macro PLETTER.GETBITEXX
    add a,a
    call z,pletter.getbitexx
  endm

pletter.modes
  dw pletter.offsok
  dw pletter.mode2
  dw pletter.mode3
  dw pletter.mode4
  dw pletter.mode5
  dw pletter.mode6

pletter.unpack:

  if defined LENGTHINDATA
    inc hl
    inc hl
  endif

  ld a,(hl)
  inc hl
  exx
  ld de,0
  add a,a
  inc a
  rl e
  add a,a
  rl e
  add a,a
  rl e
  rl e
  ld hl,pletter.modes
  add hl,de
  ld e,(hl)
  ld ixl,e
  inc hl
  ld e,(hl)
  ld ixh,e
  ld e,1
  exx
  ld iy,pletter.loop
pletter.literal:
  ldi
pletter.loop:
  PLETTER.GETBIT
  jr nc,pletter.literal
  exx
  ld h,d
  ld l,e
pletter.getlen:
  PLETTER.GETBITEXX
  jr nc,pletter.lenok
pletter.lus:
  PLETTER.GETBITEXX
  adc hl,hl
  ret c
  PLETTER.GETBITEXX
  jr nc,pletter.lenok
  PLETTER.GETBITEXX
  adc hl,hl
  ret c
  PLETTER.GETBITEXX
  jp c,pletter.lus
pletter.lenok
  inc hl
  exx
  ld c,(hl)
  inc hl
  ld b,0
  bit 7,c
  jp z,pletter.offsok
  ;jp ix
  push ix
  ret

pletter.mode6
  PLETTER.GETBIT
  rl b
pletter.mode5
  PLETTER.GETBIT
  rl b
pletter.mode4
  PLETTER.GETBIT
  rl b
pletter.mode3
  PLETTER.GETBIT
  rl b
pletter.mode2
  PLETTER.GETBIT
  rl b
  PLETTER.GETBIT
  jr nc,pletter.offsok
  or a
  inc b
  res 7,c
pletter.offsok
  inc bc
  push hl
  exx
  push hl
  exx
  ld l,e
  ld h,d
  sbc hl,bc
  pop bc
  ldir
  pop hl
  ;jp iy
  push iy
  ret

pletter.getbit
  ld a,(hl)
  inc hl
  rla
  ret

pletter.getbitexx
  exx
  ld a,(hl)
  inc hl
  exx
  rla
  ret

;eof

data:
